{
    "fileTypes": ["ipl"],
    "name": "ImpactPolicyLanguage",
    "patterns": [{
            "match": "^(#!.*)$",
            "name": "meta.preprocessor.script.lookup"
        },
        {
            "begin": "^\\w*\\b(library|import|part of|part|export)\\b",
            "beginCaptures": {
                "0": {
                    "name": "keyword.other.import.lookup"
                }
            },
            "end": ";",
            "endCaptures": {
                "0": {
                    "name": "punctuation.terminator.lookup"
                }
            },
            "name": "meta.declaration.lookup",
            "patterns": [{
                    "include": "#strings"
                },
                {
                    "include": "#comments"
                },
                {
                    "match": "\\b(as|show|hide)\\b",
                    "name": "keyword.other.import.lookup"
                }
            ]
        },
        {
            "include": "#comments"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#constants-and-special-vars"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "rulesdoc": {
            "patterns": [{
                    "match": "(\\[.*?\\])",
                    "captures": {
                        "0": {
                            "name": "variable.name.source.lookup"
                        }
                    }
                },
                {
                    "match": "^ {4,}(?![ \\*]).*",
                    "captures": {
                        "0": {
                            "name": "variable.name.source.lookup"
                        }
                    }
                },
                {
                    "begin": "```.*?$",
                    "end": "```",
                    "contentName": "variable.other.source.lookup"
                },
                {
                    "match": "(`.*?`)",
                    "captures": {
                        "0": {
                            "name": "variable.other.source.lookup"
                        }
                    }
                },
                {
                    "match": "(`.*?`)",
                    "captures": {
                        "0": {
                            "name": "variable.other.source.lookup"
                        }
                    }
                },
                {
                    "match": "(\\* ((    ).*))$",
                    "captures": {
                        "2": {
                            "name": "variable.other.source.lookup"
                        }
                    }
                },
                {
                    "match": "(\\*    .*)$"
                }
            ]
        },
        "comments": {
            "patterns": [{
                "captures": {
                    "0": {
                        "name": "punctuation.definition.comment.lookup"
                    }
                },
                "match": "#",
                "name": "comment.block.empty.lookup"
            }]
        },
        "annotations": {
            "patterns": [{
                "match": "@[a-zA-Z]+",
                "name": "storage.type.annotation.lookup"
            }]
        },
        "constants-and-special-vars": {
            "patterns": [{
                    "match": "(?<!\\$)\\b(true|false|null)\\b(?!\\$)",
                    "name": "constant.language.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(this|super)\\b(?!\\$)",
                    "name": "variable.language.lookup"
                },
                {
                    "match": "(?<!\\$)\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b(?!\\$)",
                    "name": "constant.numeric.lookup"
                },
                {
                    "match": "(?<![a-zA-Z0-9_$])([_$]*[A-Z][a-zA-Z0-9_$]*|bool\\b|num\\b|int\\b|double\\b|dynamic\\b)",
                    "name": "support.class.lookup"
                },
                {
                    "match": "([_$]*[a-z][a-zA-Z0-9_$]*)(<|\\(|\\s+=>)",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.lookup"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [{
                    "match": "(?<!\\$)\\bas\\b(?!\\$)",
                    "name": "keyword.cast.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(try|on|catch|finally|throw|rethrow)\\b(?!\\$)",
                    "name": "keyword.control.catch-exception.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(break|case|continue|default|do|else|for|if|in|return|switch|while)\\b(?!\\$)",
                    "name": "keyword.control.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(sync(\\*)?|async(\\*)?|await|yield(\\*)?)\\b(?!\\$)",
                    "name": "keyword.control.lookup"
                },
                {
                    "match": "(?<!\\$)\\bassert\\b(?!\\$)",
                    "name": "keyword.control.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(new)\\b(?!\\$)",
                    "name": "keyword.control.new.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(abstract|class|enum|extends|extension|external|factory|implements|get|mixin|native|operator|set|typedef|with|covariant)\\b(?!\\$)",
                    "name": "keyword.declaration.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(is\\!?)\\b(?!\\$)",
                    "name": "keyword.operator.lookup"
                },
                {
                    "match": "\\?|:",
                    "name": "keyword.operator.ternary.lookup"
                },
                {
                    "match": "(<<|>>>?|~|\\^|\\||&)",
                    "name": "keyword.operator.bitwise.lookup"
                },
                {
                    "match": "((&|\\^|\\||<<|>>>?)=)",
                    "name": "keyword.operator.assignment.bitwise.lookup"
                },
                {
                    "match": "(=>)",
                    "name": "keyword.operator.closure.lookup"
                },
                {
                    "match": "(==|!=|<=?|>=?)",
                    "name": "keyword.operator.comparison.lookup"
                },
                {
                    "match": "(([+*/%-]|\\~)=)",
                    "name": "keyword.operator.assignment.arithmetic.lookup"
                },
                {
                    "match": "(=)",
                    "name": "keyword.operator.assignment.lookup"
                },
                {
                    "match": "(\\-\\-|\\+\\+)",
                    "name": "keyword.operator.increment-decrement.lookup"
                },
                {
                    "match": "(\\-|\\+|\\*|\\/|\\~\\/|%)",
                    "name": "keyword.operator.arithmetic.lookup"
                },
                {
                    "match": "(!|&&|\\|\\|)",
                    "name": "keyword.operator.logical.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(static|final|const|required|late)\\b(?!\\$)",
                    "name": "storage.modifier.lookup"
                },
                {
                    "match": "(?<!\\$)\\b(?:void|var)\\b(?!\\$)",
                    "name": "storage.type.primitive.lookup"
                }
            ]
        },
        "string-interp": {
            "patterns": [{
                    "captures": {
                        "2": {
                            "name": "variable.parameter.lookup"
                        },
                        "3": {
                            "name": "variable.parameter.lookup"
                        }
                    },
                    "match": "\\$((\\w+)|\\{([^{}]+)\\})|^\\$(\\w+)"
                },
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.lookup"
                }
            ]
        },
        "strings": {
            "patterns": [{
                    "begin": "(?<!r)\"\"\"",
                    "end": "\"\"\"(?!\")",
                    "name": "string.interpolated.triple.double.lookup",
                    "patterns": [{
                        "include": "#string-interp"
                    }]
                },
                {
                    "begin": "(?<!r)'''",
                    "end": "'''(?!')",
                    "name": "string.interpolated.triple.single.lookup",
                    "patterns": [{
                        "include": "#string-interp"
                    }]
                },
                {
                    "begin": "r\"\"\"",
                    "end": "\"\"\"(?!\")",
                    "name": "string.quoted.triple.double.lookup"
                },
                {
                    "begin": "r'''",
                    "end": "'''(?!')",
                    "name": "string.quoted.triple.single.lookup"
                },
                {
                    "begin": "(?<!\\|r)\"",
                    "end": "\"",
                    "name": "string.interpolated.double.lookup",
                    "patterns": [{
                            "match": "\\n",
                            "name": "invalid.string.newline"
                        },
                        {
                            "include": "#string-interp"
                        }
                    ]
                },
                {
                    "begin": "r\"",
                    "end": "\"",
                    "name": "string.quoted.double.lookup",
                    "patterns": [{
                        "match": "\\n",
                        "name": "invalid.string.newline"
                    }]
                },
                {
                    "begin": "(?<!\\|r)'",
                    "end": "'",
                    "name": "string.interpolated.single.lookup",
                    "patterns": [{
                            "match": "\\n",
                            "name": "invalid.string.newline"
                        },
                        {
                            "include": "#string-interp"
                        }
                    ]
                },
                {
                    "begin": "r'",
                    "end": "'",
                    "name": "string.quoted.single.lookup",
                    "patterns": [{
                        "match": "\\n",
                        "name": "invalid.string.newline"
                    }]
                }
            ]
        },
        "punctuation": {
            "patterns": [{
                    "match": ",",
                    "name": "punctuation.comma.lookup"
                },
                {
                    "match": ";",
                    "name": "punctuation.terminator.lookup"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.dot.lookup"
                }
            ]
        }
    },
    "scopeName": "source.lookup"
}